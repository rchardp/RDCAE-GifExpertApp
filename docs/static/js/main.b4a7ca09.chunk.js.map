{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACG,sBAAMC,SAZY,SAAEC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAOjB,SACG,uBACGO,KAAK,OACLC,MAAQT,EACRU,SApBiB,SAAEP,GACzBF,EAAeE,EAAEQ,OAAOF,a,QCNjBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACtC,OACG,sBAAKC,UAAU,yCAAf,UACG,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCLDK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdN,EAFc,iDAEmCO,UAAUF,GAF7C,+DAIFG,MAAOR,GAJL,cAIdS,EAJc,gBAKGA,EAAIC,OALP,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAG,YAAK,CAC5BhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVjB,kBAabY,GAba,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAWvB,ECZyB,SAAEA,GAC3B,MAA0BrB,mBAAS,CAChC2B,KAAM,GACNO,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WAEPjB,EAASC,GACLiB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACpBT,KAAMY,EACNL,SAAS,SAGf,CAACb,IAGGc,EDL0BK,CAAcnB,GAAlCU,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QAGrB,OACG,qCACG,6BAAMb,IAEHa,GAAW,2CAEd,qBAAKjB,UAAU,YAAf,SAEMc,EAAOF,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aExBlB2B,EAAe,WAEzB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAGA,OACG,qCACG,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEM2C,EAAWb,KAAI,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEGA,SAAWA,GADLA,Y,MCZ3BsB,IAASC,OACP,cAAC,EAAD,IACEC,SAASC,eAAe,W","file":"static/js/main.b4a7ca09.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n   const [inputValue, setInputValue] = useState('');\n\n   const handleInputChange = ( e ) => {\n      setInputValue( e.target.value );\n   }\n\n   const handleSubmit = ( e ) => {\n      e.preventDefault();\n      \n      if (inputValue.trim().length > 2) {\n         setCategories( cats => [inputValue, ...cats]);\n         setInputValue('');\n      }\n\n     \n   }\n\n   return (\n      <form onSubmit={ handleSubmit }>\n         <input\n            type=\"text\"\n            value={ inputValue }\n            onChange={ handleInputChange }\n         />\n      </form>\n   )\n}\n\n\nAddCategory.propTypes = {\n   setCategories: PropTypes.func.isRequired\n}\n\n\n\n\n\n\n\n","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n   return (\n      <div className=\"card animate__animated animate__fadeIn\">\n         <img src={ url } alt={ title } />\n         <p>{ title }</p>\n      </div>\n   )\n}\n","\nexport const getGifs = async( category ) => {\n\n   const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=lhZ69xc6LXHIAm47FLKS3r58GvWyjhb3`;\n\n   const res = await fetch( url );\n   const { data } = await res.json();\n\n   const gifs = data.map( img => ({\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n   }));\n\n   return gifs;\n\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n\nexport const GifGrid = ({ category }) => {\n\n   // const [images, setImages] = useState([])\n\n   // // Ejecuta getGifs cuando el componente es renderizado por 1ra vez\n   // useEffect( () => {\n   //    getGifs(category)\n   //       .then( setImages );\n   // }, [category] );\n\n\n   const { data:images, loading } = useFetchGifs( category );\n\n\n   return (\n      <>\n         <h3>{ category }</h3>\n         {\n            loading && <p>Loading...</p>\n         }\n         <div className=\"card-grid\">\n            {\n               images.map((img) => (\n                  <GifGridItem\n                     key={ img.id }\n                     { ...img }\n                  />\n               ))\n            }\n         </div>\n      </>\n   )\n}\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n   const [state, setState] = useState({\n      data: [],\n      loading: true\n   })\n\n   useEffect(() => {\n\n      getGifs( category )\n         .then(imgs => setState({\n            data: imgs,\n            loading: false\n         }));\n\n   }, [category]);\n\n\n   return state;\n\n}\n\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n\n   const [categories, setCategories] = useState(['One Punch']);\n\n\n   return (\n      <>\n         <h2>Gif Expert App</h2>\n         <AddCategory setCategories={ setCategories }/>\n         <hr />\n\n         <ol>\n            {\n               categories.map(category => (\n                  <GifGrid\n                     key={ category }\n                     category={ category }\n                  />\n               ))\n            }\n         </ol>\n\n      </>\n   );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />\n  , document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}